{"version":3,"sources":["../src/index.ts","../src/server/register.ts","../src/types/index.ts","../src/server/authenticate.ts","../src/server/delete.ts","../src/client/useRegisterPasskey.ts","../src/client/useAuthenticatePasskey.ts","../src/client/useManagePasskeys.ts","../src/adapters/prisma.ts","../src/adapters/supabase.ts","../src/store/memory.ts","../src/store/redis.ts","../src/store/db.ts"],"sourcesContent":["/**\n * next-passkey - Next.js Passkey (WebAuthn) SDK\n *\n * A focused, minimal, and extensible Passkey authentication library for Next.js\n *\n * @example\n * ```typescript\n * // Server-side\n * import { startRegistration, PrismaAdapter, RedisStore } from \"next-passkey-webauthn/server\";\n *\n * // Client-side\n * import { useRegisterPasskey } from \"next-passkey-webauthn/client\";\n *\n * // Types\n * import type { StoredCredential } from \"next-passkey-webauthn/types\";\n * ```\n */\n\n// Re-export everything for convenience (main entry point)\nexport * from \"./server/index.js\";\nexport * from \"./client/index.js\";\nexport * from \"./adapters/index.js\";\nexport * from \"./store/index.js\";\nexport * from \"./types/index.js\";\n\n// Named exports for better tree-shaking\nexport {\n  // Server functions\n  startRegistration,\n  finishRegistration,\n  startAuthentication,\n  finishAuthentication,\n  deletePasskey,\n  listUserPasskeys,\n} from \"./server/index.js\";\n\nexport {\n  // Client hooks\n  useRegisterPasskey,\n  useAuthenticatePasskey,\n  useManagePasskeys,\n} from \"./client/index.js\";\n\nexport {\n  // Adapters\n  PrismaAdapter,\n  SupabaseAdapter,\n  type PrismaClient,\n  type SupabaseClient,\n} from \"./adapters/index.js\";\n\nexport {\n  // Stores\n  MemoryStore,\n  RedisStore,\n  DbStore,\n  type RedisClient,\n  type DatabaseClient,\n} from \"./store/index.js\";\n\nexport {\n  // Core types\n  PasskeyError,\n  ErrorCodes,\n  type StoredCredential,\n  type PasskeyAdapter,\n  type ChallengeStore,\n  type ChallengeRecord,\n  type ServerOptions,\n  type RPConfig,\n  type ClientConfig,\n  type Flow,\n  type ErrorCode,\n} from \"./types/index.js\";\n","import {\n  type AuthenticatorTransportFuture,\n  type PublicKeyCredentialCreationOptionsJSON,\n  type RegistrationResponseJSON,\n  generateRegistrationOptions,\n  verifyRegistrationResponse,\n} from \"@simplewebauthn/server\";\nimport {\n  type ChallengeRecord,\n  ErrorCodes,\n  type Flow,\n  PasskeyError,\n  type RegistrationStartOptions,\n  type ServerOptions,\n  type StoredCredential,\n} from \"../types/index.js\";\n\n/**\n * Start passkey registration flow\n */\nexport async function startRegistration(\n  userId: string,\n  options: ServerOptions,\n  registrationOptions?: RegistrationStartOptions\n): Promise<PublicKeyCredentialCreationOptionsJSON> {\n  try {\n    // Get existing credentials to exclude from registration\n    const existingCredentials = await options.adapter.listUserPasskeys(userId);\n    const excludeCredentials = existingCredentials.map((cred) => ({\n      id: cred.credentialId,\n      type: \"public-key\" as const,\n      transports: cred.transports as AuthenticatorTransportFuture[],\n    }));\n\n    // Generate registration options\n    const registrationOpts = await generateRegistrationOptions({\n      rpName: options.rpConfig.rpName,\n      rpID: options.rpConfig.rpID,\n      userID: Buffer.from(userId, \"utf-8\"),\n      userName: registrationOptions?.userName || userId,\n      userDisplayName: registrationOptions?.userDisplayName || userId,\n      timeout: registrationOptions?.timeout || 300000, // 5 minutes\n      attestationType: \"none\",\n      excludeCredentials: excludeCredentials,\n      authenticatorSelection: {\n        residentKey: \"preferred\",\n        userVerification: \"preferred\",\n        authenticatorAttachment: \"platform\",\n      },\n      supportedAlgorithmIDs: [-7, -257], // ES256, RS256\n    });\n\n    // Store challenge\n    const expiresAt = Date.now() + (registrationOptions?.timeout || 300000);\n    const challengeRecord: ChallengeRecord = {\n      id: `${userId}:registration`,\n      userId,\n      flow: \"registration\" as Flow,\n      challenge: registrationOpts.challenge,\n      expiresAt,\n    };\n\n    await options.store.set(challengeRecord);\n\n    return registrationOpts;\n  } catch (error) {\n    if (error instanceof PasskeyError) {\n      throw error;\n    }\n    throw new PasskeyError(\n      \"Failed to start registration\",\n      ErrorCodes.STORAGE_ERROR,\n      error\n    );\n  }\n}\n\n/**\n * Complete passkey registration flow\n */\nexport async function finishRegistration(\n  userId: string,\n  credential: RegistrationResponseJSON,\n  options: ServerOptions,\n  registrationOptions?: RegistrationStartOptions\n): Promise<{ verified: boolean; credential?: StoredCredential }> {\n  try {\n    // Retrieve challenge\n    const challengeRecord = await options.store.get(userId, \"registration\");\n    if (!challengeRecord) {\n      throw new PasskeyError(\n        \"Challenge not found or expired\",\n        ErrorCodes.CHALLENGE_NOT_FOUND\n      );\n    }\n\n    // Check if challenge is expired\n    if (Date.now() > challengeRecord.expiresAt) {\n      await options.store.delete(userId, \"registration\");\n      throw new PasskeyError(\"Challenge expired\", ErrorCodes.CHALLENGE_EXPIRED);\n    }\n\n    // Verify the registration response\n    const verification = await verifyRegistrationResponse({\n      response: credential,\n      expectedChallenge: challengeRecord.challenge,\n      expectedOrigin: options.rpConfig.expectedOrigin,\n      expectedRPID: options.rpConfig.rpID,\n      requireUserVerification: false,\n    });\n\n    // Clean up challenge immediately after verification\n    await options.store.delete(userId, \"registration\");\n\n    if (!verification.verified || !verification.registrationInfo) {\n      throw new PasskeyError(\n        \"Registration verification failed\",\n        ErrorCodes.VERIFICATION_FAILED,\n        verification\n      );\n    }\n\n    // Extract credential information\n    const {\n      credential: {\n        id: credentialID,\n        publicKey: credentialPublicKey,\n        counter,\n        transports,\n      },\n    } = verification.registrationInfo;\n\n    // Convert credential ID to base64url string\n    const credentialIdString = Buffer.from(credentialID).toString(\"base64url\");\n\n    // Check if credential already exists\n    const existingCredential = await options.adapter.findByCredentialId(\n      credentialIdString\n    );\n    if (existingCredential) {\n      throw new PasskeyError(\n        \"Credential already registered\",\n        ErrorCodes.INVALID_INPUT\n      );\n    }\n\n    // Store the credential\n    const storedCredential = await options.adapter.createPasskey({\n      userId,\n      credentialId: credentialID,\n      publicKey: Buffer.from(credentialPublicKey).toString(\"base64url\"),\n      counter,\n      transports,\n      userName: registrationOptions?.userName,\n      userDisplayName: registrationOptions?.userDisplayName,\n    });\n\n    return {\n      verified: true,\n      credential: storedCredential,\n    };\n  } catch (error) {\n    // Clean up challenge on any error\n    try {\n      await options.store.delete(userId, \"registration\");\n    } catch {\n      // Ignore cleanup errors\n    }\n    if (error instanceof PasskeyError) {\n      throw error;\n    }\n    throw new PasskeyError(\n      \"Failed to finish registration\",\n      ErrorCodes.VERIFICATION_FAILED,\n      error\n    );\n  }\n}\n","/**\n * Core types and interfaces for the next-passkey library\n */\n\n/**\n * WebAuthn flow types\n */\nexport type Flow = \"registration\" | \"authentication\";\n\n/**\n * Stored credential data structure\n * Represents a passkey credential stored in the database\n */\nexport type StoredCredential = {\n  /** Local database ID (cuid/uuid) */\n  id: string;\n  /** User ID this credential belongs to */\n  userId: string;\n  /** Base64url representation of the credential ID (unique) */\n  credentialId: string;\n  /** Base64url encoded public key */\n  publicKey: string;\n  /** Authenticator counter value */\n  counter: number;\n  /** Optional authenticator transports */\n  transports?: string[];\n  /** Optional user display name */\n  userDisplayName?: string;\n  /** Optional user name/identifier */\n  userName?: string;\n  /** ISO string of creation timestamp */\n  createdAt: string;\n  /** ISO string of last update timestamp */\n  updatedAt?: string;\n};\n\n/**\n * Adapter interface for credential persistence\n * Implementations handle storing and retrieving passkey credentials\n */\nexport interface PasskeyAdapter {\n  /**\n   * Create a new passkey credential\n   */\n  createPasskey(\n    data: Omit<StoredCredential, \"id\" | \"createdAt\">\n  ): Promise<StoredCredential>;\n\n  /**\n   * Find a credential by its credential ID\n   */\n  findByCredentialId(credentialId: string): Promise<StoredCredential | null>;\n\n  /**\n   * List all passkeys for a user\n   */\n  listUserPasskeys(userId: string): Promise<StoredCredential[]>;\n\n  /**\n   * Update the counter value for a credential\n   */\n  updateCounter(id: string, counter: number): Promise<void>;\n\n  /**\n   * Delete a passkey credential\n   */\n  deletePasskey(id: string): Promise<void>;\n}\n\n/**\n * Challenge record for WebAuthn flows\n * Stored temporarily during registration/authentication flows\n */\nexport interface ChallengeRecord {\n  /** Unique challenge ID, typically `${userId}:${flow}` */\n  id: string;\n  /** User ID this challenge belongs to */\n  userId: string;\n  /** The WebAuthn flow type */\n  flow: Flow;\n  /** Base64url encoded challenge */\n  challenge: string;\n  /** Expiration timestamp in epoch milliseconds */\n  expiresAt: number;\n}\n\n/**\n * Challenge store interface for temporary challenge storage\n * Implementations handle storing challenges during WebAuthn flows\n */\nexport interface ChallengeStore {\n  /**\n   * Store a challenge record\n   */\n  set(record: ChallengeRecord): Promise<void>;\n\n  /**\n   * Retrieve a challenge record by user ID and flow\n   */\n  get(userId: string, flow: Flow): Promise<ChallengeRecord | null>;\n\n  /**\n   * Delete a challenge record by user ID and flow\n   */\n  delete(userId: string, flow: Flow): Promise<void>;\n}\n\n/**\n * Configuration for WebAuthn relying party\n */\nexport interface RPConfig {\n  /** Relying Party ID (domain) */\n  rpID: string;\n  /** Relying Party name */\n  rpName: string;\n  /** Expected origin for WebAuthn operations */\n  expectedOrigin: string | string[];\n}\n\n/**\n * Server function options\n */\nexport interface ServerOptions {\n  /** Credential storage adapter */\n  adapter: PasskeyAdapter;\n  /** Challenge storage implementation */\n  store: ChallengeStore;\n  /** Relying party configuration */\n  rpConfig: RPConfig;\n}\n\n/**\n * Registration start options\n */\nexport interface RegistrationStartOptions {\n  /** User display name for the credential */\n  userDisplayName?: string;\n  /** User name/identifier for the credential */\n  userName?: string;\n  /** Challenge timeout in milliseconds (default: 300000 = 5 minutes) */\n  timeout?: number;\n}\n\n/**\n * Authentication start options\n */\nexport interface AuthenticationStartOptions {\n  /** Challenge timeout in milliseconds */\n  timeout?: number;\n  /** User verification requirement */\n  userVerification?: \"required\" | \"preferred\" | \"discouraged\";\n}\n\n/**\n * Common error types\n */\nexport class PasskeyError extends Error {\n  constructor(message: string, public code: string, public details?: unknown) {\n    super(message);\n    this.name = \"PasskeyError\";\n  }\n}\n\n/**\n * Error codes for common scenarios\n */\nexport const ErrorCodes = {\n  CHALLENGE_NOT_FOUND: \"CHALLENGE_NOT_FOUND\",\n  CHALLENGE_EXPIRED: \"CHALLENGE_EXPIRED\",\n  CREDENTIAL_NOT_FOUND: \"CREDENTIAL_NOT_FOUND\",\n  VERIFICATION_FAILED: \"VERIFICATION_FAILED\",\n  INVALID_INPUT: \"INVALID_INPUT\",\n  STORAGE_ERROR: \"STORAGE_ERROR\",\n} as const;\n\nexport type ErrorCode = (typeof ErrorCodes)[keyof typeof ErrorCodes];\n\n/**\n * Client hook configuration\n */\nexport interface ClientConfig {\n  /** API endpoints for server calls */\n  endpoints: {\n    /** Registration start endpoint */\n    registerStart: string;\n    /** Registration finish endpoint */\n    registerFinish: string;\n    /** Authentication start endpoint */\n    authenticateStart: string;\n    /** Authentication finish endpoint */\n    authenticateFinish: string;\n    /** Delete passkey endpoint */\n    deletePasskey: string;\n    /** List passkeys endpoint */\n    listPasskeys: string;\n  };\n}\n\n/**\n * Hook return types for loading states and errors\n */\nexport interface HookState {\n  /** Loading state */\n  loading: boolean;\n  /** Error state */\n  error: string | null;\n}\n\n/**\n * Registration hook return type\n */\nexport interface RegisterPasskeyHook extends HookState {\n  /** Register a new passkey */\n  register: (\n    userId: string,\n    options?: RegistrationStartOptions\n  ) => Promise<{ verified: boolean; credential?: StoredCredential }>;\n}\n\n/**\n * Authentication hook return type\n */\nexport interface AuthenticatePasskeyHook extends HookState {\n  /** Authenticate with a passkey */\n  authenticate: (\n    userId: string,\n    options?: AuthenticationStartOptions\n  ) => Promise<{ verified: boolean; credential?: StoredCredential }>;\n}\n\n/**\n * Management hook return type\n */\nexport interface ManagePasskeysHook extends HookState {\n  /** List user's passkeys */\n  list: (userId: string) => Promise<StoredCredential[]>;\n  /** Delete a passkey */\n  remove: (credentialId: string) => Promise<void>;\n}\n","import {\n  type AuthenticationResponseJSON,\n  type AuthenticatorTransportFuture,\n  type PublicKeyCredentialRequestOptionsJSON,\n  generateAuthenticationOptions,\n  verifyAuthenticationResponse,\n} from \"@simplewebauthn/server\";\nimport {\n  type AuthenticationStartOptions,\n  type ChallengeRecord,\n  ErrorCodes,\n  type Flow,\n  PasskeyError,\n  type ServerOptions,\n  type StoredCredential,\n} from \"../types/index.js\";\n\n/**\n * Start passkey authentication flow\n */\nexport async function startAuthentication(\n  userId: string,\n  options: ServerOptions,\n  authOptions?: AuthenticationStartOptions\n): Promise<PublicKeyCredentialRequestOptionsJSON> {\n  try {\n    // Get user's credentials\n    const userCredentials = await options.adapter.listUserPasskeys(userId);\n\n    if (userCredentials.length === 0) {\n      throw new PasskeyError(\n        \"No passkeys found for user\",\n        ErrorCodes.CREDENTIAL_NOT_FOUND\n      );\n    }\n\n    // Prepare credentials for authentication\n    const allowCredentials = userCredentials.map((cred) => ({\n      id: cred.credentialId,\n      type: \"public-key\" as const,\n      transports: cred.transports as AuthenticatorTransportFuture[],\n    }));\n\n    // Generate authentication options\n    const authenticationOpts = await generateAuthenticationOptions({\n      rpID: options.rpConfig.rpID,\n      timeout: authOptions?.timeout || 300000, // 5 minutes\n      allowCredentials,\n      userVerification: authOptions?.userVerification || \"preferred\",\n    });\n\n    // Store challenge\n    const expiresAt = Date.now() + (authOptions?.timeout || 300000);\n    const challengeRecord: ChallengeRecord = {\n      id: `${userId}:authentication`,\n      userId,\n      flow: \"authentication\" as Flow,\n      challenge: authenticationOpts.challenge,\n      expiresAt,\n    };\n\n    await options.store.set(challengeRecord);\n\n    return authenticationOpts;\n  } catch (error) {\n    if (error instanceof PasskeyError) {\n      throw error;\n    }\n    throw new PasskeyError(\n      \"Failed to start authentication\",\n      ErrorCodes.STORAGE_ERROR,\n      error\n    );\n  }\n}\n\n/**\n * Complete passkey authentication flow\n */\nexport async function finishAuthentication(\n  userId: string,\n  credential: AuthenticationResponseJSON,\n  options: ServerOptions\n): Promise<{ verified: boolean; credential?: StoredCredential }> {\n  try {\n    // Retrieve challenge\n    const challengeRecord = await options.store.get(userId, \"authentication\");\n    if (!challengeRecord) {\n      throw new PasskeyError(\n        \"Challenge not found or expired\",\n        ErrorCodes.CHALLENGE_NOT_FOUND\n      );\n    }\n\n    // Check if challenge is expired\n    if (Date.now() > challengeRecord.expiresAt) {\n      await options.store.delete(userId, \"authentication\");\n      throw new PasskeyError(\"Challenge expired\", ErrorCodes.CHALLENGE_EXPIRED);\n    }\n\n    // Find the credential being used\n    const credentialIdString = credential.id;\n    const storedCredential = await options.adapter.findByCredentialId(\n      credentialIdString\n    );\n\n    if (!storedCredential) {\n      await options.store.delete(userId, \"authentication\");\n      throw new PasskeyError(\n        \"Credential not found\",\n        ErrorCodes.CREDENTIAL_NOT_FOUND\n      );\n    }\n\n    // Verify the credential belongs to the user\n    if (storedCredential.userId !== userId) {\n      await options.store.delete(userId, \"authentication\");\n      throw new PasskeyError(\n        \"Credential does not belong to user\",\n        ErrorCodes.VERIFICATION_FAILED\n      );\n    }\n\n    // Prepare authenticator data for verification\n    const authenticator = {\n      id: storedCredential.credentialId,\n      publicKey: Buffer.from(storedCredential.publicKey, \"base64url\"),\n      counter: storedCredential.counter,\n      transports: storedCredential.transports as AuthenticatorTransportFuture[],\n    };\n\n    // Verify the authentication response\n    const verification = await verifyAuthenticationResponse({\n      response: credential,\n      expectedChallenge: challengeRecord.challenge,\n      expectedOrigin: options.rpConfig.expectedOrigin,\n      expectedRPID: options.rpConfig.rpID,\n      credential: authenticator,\n      requireUserVerification: false,\n    });\n\n    // Clean up challenge immediately after verification\n    await options.store.delete(userId, \"authentication\");\n\n    if (!verification.verified) {\n      throw new PasskeyError(\n        \"Authentication verification failed\",\n        ErrorCodes.VERIFICATION_FAILED,\n        verification\n      );\n    }\n\n    // Update the counter if verification succeeded\n    const newCounter = verification.authenticationInfo.newCounter;\n    if (newCounter > storedCredential.counter) {\n      await options.adapter.updateCounter(storedCredential.id, newCounter);\n      storedCredential.counter = newCounter;\n    }\n\n    return {\n      verified: true,\n      credential: storedCredential,\n    };\n  } catch (error) {\n    // Clean up challenge on any error\n    try {\n      await options.store.delete(userId, \"authentication\");\n    } catch {\n      // Ignore cleanup errors\n    }\n\n    if (error instanceof PasskeyError) {\n      throw error;\n    }\n    throw new PasskeyError(\n      \"Failed to finish authentication\",\n      ErrorCodes.VERIFICATION_FAILED,\n      error\n    );\n  }\n}\n","import {\n  ErrorCodes,\n  PasskeyError,\n  type ServerOptions,\n  type StoredCredential,\n} from \"../types/index.js\";\n\n/**\n * Delete a specific passkey credential\n */\nexport async function deletePasskey(\n  userId: string,\n  credentialId: string,\n  options: ServerOptions\n): Promise<void> {\n  try {\n    // Find the credential to verify ownership\n    const credential = await options.adapter.findByCredentialId(credentialId);\n\n    if (!credential) {\n      throw new PasskeyError(\n        \"Credential not found\",\n        ErrorCodes.CREDENTIAL_NOT_FOUND\n      );\n    }\n\n    // Verify the credential belongs to the user\n    if (credential.userId !== userId) {\n      throw new PasskeyError(\n        \"Credential does not belong to user\",\n        ErrorCodes.VERIFICATION_FAILED\n      );\n    }\n\n    // Delete the credential\n    await options.adapter.deletePasskey(credential.id);\n  } catch (error) {\n    if (error instanceof PasskeyError) {\n      throw error;\n    }\n    throw new PasskeyError(\n      \"Failed to delete passkey\",\n      ErrorCodes.STORAGE_ERROR,\n      error\n    );\n  }\n}\n\n/**\n * List all passkey credentials for a user\n */\nexport async function listUserPasskeys(\n  userId: string,\n  options: ServerOptions\n): Promise<StoredCredential[]> {\n  try {\n    return await options.adapter.listUserPasskeys(userId);\n  } catch (error) {\n    if (error instanceof PasskeyError) {\n      throw error;\n    }\n    throw new PasskeyError(\n      \"Failed to list passkeys\",\n      ErrorCodes.STORAGE_ERROR,\n      error\n    );\n  }\n}\n","import {\n  type PublicKeyCredentialCreationOptionsJSON,\n  type RegistrationResponseJSON,\n  startRegistration,\n} from \"@simplewebauthn/browser\";\nimport { useCallback, useState } from \"react\";\nimport {\n  type ClientConfig,\n  ErrorCodes,\n  PasskeyError,\n  type RegisterPasskeyHook,\n  type RegistrationStartOptions,\n  type StoredCredential,\n} from \"../types/index.js\";\n\n/**\n * React hook for passkey registration\n */\nexport function useRegisterPasskey(config: ClientConfig): RegisterPasskeyHook {\n  const [loading, setLoading] = useState(false);\n  const [error, setError] = useState<string | null>(null);\n\n  const register = useCallback(\n    async (\n      userId: string,\n      options?: RegistrationStartOptions\n    ): Promise<{ verified: boolean; credential?: StoredCredential }> => {\n      setLoading(true);\n      setError(null);\n\n      try {\n        // Step 1: Start registration flow\n        const startResponse = await fetch(config.endpoints.registerStart, {\n          method: \"POST\",\n          headers: {\n            \"Content-Type\": \"application/json\",\n          },\n          credentials: \"include\",\n          body: JSON.stringify({ userId, ...options }),\n        });\n\n        if (!startResponse.ok) {\n          const errorData = await startResponse.json();\n          throw new PasskeyError(\n            errorData.error || \"Failed to start registration\",\n            ErrorCodes.INVALID_INPUT\n          );\n        }\n\n        const creationOptions: PublicKeyCredentialCreationOptionsJSON =\n          await startResponse.json();\n\n        // Step 2: Create credential using WebAuthn browser API\n        let credential: RegistrationResponseJSON;\n        try {\n          credential = await startRegistration({\n            optionsJSON: creationOptions,\n          });\n        } catch (browserError) {\n          // Handle common browser errors\n          if (browserError instanceof Error) {\n            if (browserError.name === \"NotAllowedError\") {\n              throw new PasskeyError(\n                \"User cancelled passkey creation or operation timed out\",\n                ErrorCodes.VERIFICATION_FAILED,\n                browserError\n              );\n            }\n            if (browserError.name === \"InvalidStateError\") {\n              throw new PasskeyError(\n                \"Authenticator is already registered\",\n                ErrorCodes.INVALID_INPUT,\n                browserError\n              );\n            }\n            if (browserError.name === \"NotSupportedError\") {\n              throw new PasskeyError(\n                \"Passkeys are not supported on this device/browser\",\n                ErrorCodes.INVALID_INPUT,\n                browserError\n              );\n            }\n          }\n          throw new PasskeyError(\n            \"Failed to create passkey\",\n            ErrorCodes.VERIFICATION_FAILED,\n            browserError\n          );\n        }\n\n        // Step 3: Finish registration flow\n        const finishResponse = await fetch(config.endpoints.registerFinish, {\n          method: \"POST\",\n          headers: {\n            \"Content-Type\": \"application/json\",\n          },\n          credentials: \"include\",\n          body: JSON.stringify({ userId, credential }),\n        });\n\n        if (!finishResponse.ok) {\n          const errorData = await finishResponse.json();\n          throw new PasskeyError(\n            errorData.error || \"Failed to finish registration\",\n            ErrorCodes.VERIFICATION_FAILED\n          );\n        }\n\n        const result = await finishResponse.json();\n        return result;\n      } catch (err) {\n        const errorMessage =\n          err instanceof PasskeyError ? err.message : \"Registration failed\";\n        setError(errorMessage);\n        throw err;\n      } finally {\n        setLoading(false);\n      }\n    },\n    [config.endpoints]\n  );\n\n  return {\n    register,\n    loading,\n    error,\n  };\n}\n","import {\n  type AuthenticationResponseJSON,\n  type PublicKeyCredentialRequestOptionsJSON,\n  startAuthentication,\n} from \"@simplewebauthn/browser\";\nimport { useCallback, useState } from \"react\";\nimport {\n  type AuthenticatePasskeyHook,\n  type AuthenticationStartOptions,\n  type ClientConfig,\n  ErrorCodes,\n  PasskeyError,\n  type StoredCredential,\n} from \"../types/index.js\";\n\n/**\n * React hook for passkey authentication\n */\nexport function useAuthenticatePasskey(\n  config: ClientConfig\n): AuthenticatePasskeyHook {\n  const [loading, setLoading] = useState(false);\n  const [error, setError] = useState<string | null>(null);\n\n  const authenticate = useCallback(\n    async (\n      userId: string,\n      options?: AuthenticationStartOptions\n    ): Promise<{ verified: boolean; credential?: StoredCredential }> => {\n      setLoading(true);\n      setError(null);\n\n      try {\n        // Step 1: Start authentication flow\n        const startResponse = await fetch(config.endpoints.authenticateStart, {\n          method: \"POST\",\n          headers: {\n            \"Content-Type\": \"application/json\",\n          },\n          credentials: \"include\",\n          body: JSON.stringify({ userId, ...options }),\n        });\n\n        if (!startResponse.ok) {\n          const errorData = await startResponse.json();\n          throw new PasskeyError(\n            errorData.error || \"Failed to start authentication\",\n            ErrorCodes.INVALID_INPUT\n          );\n        }\n\n        const requestOptions: PublicKeyCredentialRequestOptionsJSON =\n          await startResponse.json();\n\n        // Step 2: Get credential using WebAuthn browser API\n        let credential: AuthenticationResponseJSON;\n        try {\n          credential = await startAuthentication({\n            optionsJSON: requestOptions,\n          });\n        } catch (browserError) {\n          // Handle common browser errors\n          if (browserError instanceof Error) {\n            if (browserError.name === \"NotAllowedError\") {\n              throw new PasskeyError(\n                \"User cancelled authentication or operation timed out\",\n                ErrorCodes.VERIFICATION_FAILED,\n                browserError\n              );\n            }\n            if (browserError.name === \"InvalidStateError\") {\n              throw new PasskeyError(\n                \"Authenticator is not available\",\n                ErrorCodes.CREDENTIAL_NOT_FOUND,\n                browserError\n              );\n            }\n            if (browserError.name === \"NotSupportedError\") {\n              throw new PasskeyError(\n                \"Passkeys are not supported on this device/browser\",\n                ErrorCodes.INVALID_INPUT,\n                browserError\n              );\n            }\n          }\n          throw new PasskeyError(\n            \"Failed to authenticate with passkey\",\n            ErrorCodes.VERIFICATION_FAILED,\n            browserError\n          );\n        }\n\n        // Step 3: Finish authentication flow\n        const finishResponse = await fetch(\n          config.endpoints.authenticateFinish,\n          {\n            method: \"POST\",\n            headers: {\n              \"Content-Type\": \"application/json\",\n            },\n            credentials: \"include\",\n            body: JSON.stringify({ userId, credential }),\n          }\n        );\n\n        if (!finishResponse.ok) {\n          const errorData = await finishResponse.json();\n          throw new PasskeyError(\n            errorData.error || \"Failed to finish authentication\",\n            ErrorCodes.VERIFICATION_FAILED\n          );\n        }\n\n        const result = await finishResponse.json();\n        return result;\n      } catch (err) {\n        const errorMessage =\n          err instanceof PasskeyError ? err.message : \"Authentication failed\";\n        setError(errorMessage);\n        throw err;\n      } finally {\n        setLoading(false);\n      }\n    },\n    [config.endpoints]\n  );\n\n  return {\n    authenticate,\n    loading,\n    error,\n  };\n}\n","import { useCallback, useState } from \"react\";\nimport {\n  type ClientConfig,\n  ErrorCodes,\n  type ManagePasskeysHook,\n  PasskeyError,\n  type StoredCredential,\n} from \"../types/index.js\";\n\n/**\n * React hook for managing passkeys (list, delete)\n */\nexport function useManagePasskeys(config: ClientConfig): ManagePasskeysHook {\n  const [loading, setLoading] = useState(false);\n  const [error, setError] = useState<string | null>(null);\n\n  const list = useCallback(\n    async (userId: string): Promise<StoredCredential[]> => {\n      setLoading(true);\n      setError(null);\n\n      try {\n        const response = await fetch(config.endpoints.listPasskeys, {\n          method: \"POST\",\n          headers: {\n            \"Content-Type\": \"application/json\",\n          },\n          credentials: \"include\",\n          body: JSON.stringify({ userId }),\n        });\n\n        if (!response.ok) {\n          const errorData = await response.json();\n          throw new PasskeyError(\n            errorData.error || \"Failed to list passkeys\",\n            ErrorCodes.STORAGE_ERROR\n          );\n        }\n\n        const passkeys: StoredCredential[] = await response.json();\n        return passkeys;\n      } catch (err) {\n        const errorMessage =\n          err instanceof PasskeyError ? err.message : \"Failed to list passkeys\";\n        setError(errorMessage);\n        throw err;\n      } finally {\n        setLoading(false);\n      }\n    },\n    [config.endpoints]\n  );\n\n  const remove = useCallback(\n    async (credentialId: string): Promise<void> => {\n      setLoading(true);\n      setError(null);\n\n      try {\n        const response = await fetch(config.endpoints.deletePasskey, {\n          method: \"POST\",\n          headers: {\n            \"Content-Type\": \"application/json\",\n          },\n          credentials: \"include\",\n          body: JSON.stringify({ credentialId }),\n        });\n\n        if (!response.ok) {\n          const errorData = await response.json();\n          throw new PasskeyError(\n            errorData.error || \"Failed to delete passkey\",\n            ErrorCodes.STORAGE_ERROR\n          );\n        }\n      } catch (err) {\n        const errorMessage =\n          err instanceof PasskeyError\n            ? err.message\n            : \"Failed to delete passkey\";\n        setError(errorMessage);\n        throw err;\n      } finally {\n        setLoading(false);\n      }\n    },\n    [config.endpoints]\n  );\n\n  return {\n    list,\n    remove,\n    loading,\n    error,\n  };\n}\n","import type { PasskeyAdapter, StoredCredential } from \"../types/index.js\";\n\n/**\n * Prisma client interface for passkey operations\n * Compatible with generated Prisma client\n */\nexport interface PrismaClient {\n  passkey: {\n    create(args: {\n      data: {\n        userId: string;\n        credentialId: string;\n        publicKey: string;\n        counter: number;\n        transports?: string[];\n        userName?: string;\n        userDisplayName?: string;\n      };\n    }): Promise<{\n      id: string;\n      userId: string;\n      credentialId: string;\n      publicKey: string;\n      counter: number;\n      transports: string[];\n      userName?: string;\n      userDisplayName?: string;\n      createdAt: Date;\n      updatedAt: Date;\n    }>;\n\n    findUnique(args: { where: { credentialId: string } }): Promise<{\n      id: string;\n      userId: string;\n      credentialId: string;\n      publicKey: string;\n      counter: number;\n      transports: string[];\n      userName?: string;\n      userDisplayName?: string;\n      createdAt: Date;\n      updatedAt: Date;\n    } | null>;\n\n    findMany(args: {\n      where: { userId: string };\n      orderBy?: { createdAt: \"asc\" | \"desc\" };\n    }): Promise<\n      Array<{\n        id: string;\n        userId: string;\n        credentialId: string;\n        publicKey: string;\n        counter: number;\n        transports: string[];\n        userName?: string;\n        userDisplayName?: string;\n        createdAt: Date;\n        updatedAt: Date;\n      }>\n    >;\n\n    update(args: {\n      where: { id: string };\n      data: { counter: number };\n    }): Promise<{\n      id: string;\n      userId: string;\n      credentialId: string;\n      publicKey: string;\n      counter: number;\n      transports: string[];\n      userName?: string;\n      userDisplayName?: string;\n      createdAt: Date;\n      updatedAt: Date;\n    }>;\n\n    delete(args: { where: { id: string } }): Promise<{\n      id: string;\n    }>;\n  };\n}\n\n/**\n * Prisma adapter for passkey credential storage\n * Works with PostgreSQL, MySQL, SQLite via Prisma ORM\n */\nexport class PrismaAdapter implements PasskeyAdapter {\n  constructor(private readonly prisma: PrismaClient) {}\n\n  async createPasskey(\n    data: Omit<StoredCredential, \"id\" | \"createdAt\">\n  ): Promise<StoredCredential> {\n    const result = await this.prisma.passkey.create({\n      data: {\n        userId: data.userId,\n        credentialId: data.credentialId,\n        publicKey: data.publicKey,\n        counter: data.counter,\n        transports: data.transports || [],\n        userName: data?.userName,\n        userDisplayName: data?.userDisplayName,\n      },\n    });\n\n    return this.mapPrismaToStored(result);\n  }\n\n  async findByCredentialId(\n    credentialId: string\n  ): Promise<StoredCredential | null> {\n    const result = await this.prisma.passkey.findUnique({\n      where: { credentialId },\n    });\n\n    return result ? this.mapPrismaToStored(result) : null;\n  }\n\n  async listUserPasskeys(userId: string): Promise<StoredCredential[]> {\n    const results = await this.prisma.passkey.findMany({\n      where: { userId },\n      orderBy: { createdAt: \"desc\" },\n    });\n\n    return results.map((result) => this.mapPrismaToStored(result));\n  }\n\n  async updateCounter(id: string, counter: number): Promise<void> {\n    await this.prisma.passkey.update({\n      where: { id },\n      data: { counter },\n    });\n  }\n\n  async deletePasskey(id: string): Promise<void> {\n    await this.prisma.passkey.delete({\n      where: { id },\n    });\n  }\n\n  private mapPrismaToStored(prismaResult: {\n    id: string;\n    userId: string;\n    credentialId: string;\n    publicKey: string;\n    counter: number;\n    transports: string[];\n    userName?: string;\n    userDisplayName?: string;\n    createdAt: Date;\n    updatedAt: Date;\n  }): StoredCredential {\n    return {\n      id: prismaResult.id,\n      userId: prismaResult.userId,\n      credentialId: prismaResult.credentialId,\n      publicKey: prismaResult.publicKey,\n      counter: prismaResult.counter,\n      transports: prismaResult.transports,\n      userName: prismaResult?.userName || undefined,\n      userDisplayName: prismaResult?.userDisplayName || undefined,\n      createdAt: prismaResult.createdAt.toISOString(),\n      updatedAt: prismaResult.updatedAt.toISOString(),\n    };\n  }\n}\n","import type { PasskeyAdapter, StoredCredential } from \"../types/index.js\";\n\n/**\n * Supabase client interface for passkey operations\n * Compatible with @supabase/supabase-js\n */\nexport interface SupabaseClient {\n  from(table: string): {\n    insert(data: {\n      user_id: string;\n      credential_id: string;\n      public_key: string;\n      counter: number;\n      transports?: string[];\n      user_name?: string;\n      user_display_name?: string;\n    }): {\n      select(columns?: string): Promise<{\n        data: Array<{\n          id: string;\n          user_id: string;\n          credential_id: string;\n          public_key: string;\n          counter: number;\n          transports: string[] | null;\n          user_name?: string;\n          user_display_name?: string;\n          created_at: string;\n          updated_at: string;\n        }> | null;\n        error: { message: string } | null;\n      }>;\n    };\n\n    select(columns?: string): {\n      eq(\n        column: string,\n        value: string\n      ): Promise<{\n        data: Array<{\n          id: string;\n          user_id: string;\n          credential_id: string;\n          public_key: string;\n          counter: number;\n          transports: string[] | null;\n          user_name?: string;\n          user_display_name?: string;\n          created_at: string;\n          updated_at: string;\n        }> | null;\n        error: { message: string } | null;\n      }>;\n      order(\n        column: string,\n        options?: { ascending: boolean }\n      ): {\n        eq(\n          column: string,\n          value: string\n        ): Promise<{\n          data: Array<{\n            id: string;\n            user_id: string;\n            credential_id: string;\n            public_key: string;\n            counter: number;\n            transports: string[] | null;\n            user_name?: string;\n            user_display_name?: string;\n            created_at: string;\n            updated_at: string;\n          }> | null;\n          error: { message: string } | null;\n        }>;\n      };\n    };\n\n    update(data: { counter: number }): {\n      eq(\n        column: string,\n        value: string\n      ): Promise<{\n        data: unknown;\n        error: { message: string } | null;\n      }>;\n    };\n\n    delete(): {\n      eq(\n        column: string,\n        value: string\n      ): Promise<{\n        data: unknown;\n        error: { message: string } | null;\n      }>;\n    };\n  };\n}\n\n/**\n * Supabase adapter for passkey credential storage\n * Works with Supabase PostgreSQL database\n */\nexport class SupabaseAdapter implements PasskeyAdapter {\n  constructor(\n    private readonly supabase: SupabaseClient,\n    /** Table name for passkeys (default: \"passkeys\") */\n    private readonly tableName = \"passkeys\"\n  ) {}\n\n  async createPasskey(\n    data: Omit<StoredCredential, \"id\" | \"createdAt\">\n  ): Promise<StoredCredential> {\n    const { data: result, error } = await this.supabase\n      .from(this.tableName)\n      .insert({\n        user_id: data.userId,\n        credential_id: data.credentialId,\n        public_key: data.publicKey,\n        counter: data.counter,\n        transports: data.transports || [],\n        user_name: data?.userName,\n        user_display_name: data?.userDisplayName,\n      })\n      .select();\n\n    if (error) {\n      throw new Error(`Failed to create passkey: ${error.message}`);\n    }\n\n    if (!result || result.length === 0) {\n      throw new Error(\"Failed to create passkey: No data returned\");\n    }\n\n    return this.mapSupabaseToStored(result[0]);\n  }\n\n  async findByCredentialId(\n    credentialId: string\n  ): Promise<StoredCredential | null> {\n    const { data, error } = await this.supabase\n      .from(this.tableName)\n      .select()\n      .eq(\"credential_id\", credentialId);\n\n    if (error) {\n      throw new Error(`Failed to find passkey: ${error.message}`);\n    }\n\n    if (!data || data.length === 0) {\n      return null;\n    }\n\n    return this.mapSupabaseToStored(data[0]);\n  }\n\n  async listUserPasskeys(userId: string): Promise<StoredCredential[]> {\n    const { data, error } = await this.supabase\n      .from(this.tableName)\n      .select()\n      .order(\"created_at\", { ascending: false })\n      .eq(\"user_id\", userId);\n\n    if (error) {\n      throw new Error(`Failed to list passkeys: ${error.message}`);\n    }\n\n    if (!data) {\n      return [];\n    }\n\n    return data.map((item) => this.mapSupabaseToStored(item));\n  }\n\n  async updateCounter(id: string, counter: number): Promise<void> {\n    const { error } = await this.supabase\n      .from(this.tableName)\n      .update({ counter })\n      .eq(\"id\", id);\n\n    if (error) {\n      throw new Error(`Failed to update counter: ${error.message}`);\n    }\n  }\n\n  async deletePasskey(id: string): Promise<void> {\n    const { error } = await this.supabase\n      .from(this.tableName)\n      .delete()\n      .eq(\"id\", id);\n\n    if (error) {\n      throw new Error(`Failed to delete passkey: ${error.message}`);\n    }\n  }\n\n  private mapSupabaseToStored(supabaseResult: {\n    id: string;\n    user_id: string;\n    credential_id: string;\n    public_key: string;\n    counter: number;\n    transports: string[] | null;\n    user_name?: string;\n    user_display_name?: string;\n    created_at: string;\n    updated_at: string;\n  }): StoredCredential {\n    return {\n      id: supabaseResult.id,\n      userId: supabaseResult.user_id,\n      credentialId: supabaseResult.credential_id,\n      publicKey: supabaseResult.public_key,\n      counter: supabaseResult.counter,\n      transports: supabaseResult.transports || undefined,\n      userName: supabaseResult?.user_name || undefined,\n      userDisplayName: supabaseResult?.user_display_name || undefined,\n      createdAt: supabaseResult.created_at,\n      updatedAt: supabaseResult.updated_at,\n    };\n  }\n}\n","import type { ChallengeRecord, ChallengeStore, Flow } from \"../types/index.js\";\n\n/**\n * In-memory challenge store for development\n * Not suitable for production multi-node deployments\n */\nexport class MemoryStore implements ChallengeStore {\n  private challenges = new Map<string, ChallengeRecord>();\n  private cleanupInterval?: NodeJS.Timeout;\n\n  constructor(\n    /** Cleanup interval in milliseconds (default: 60000 = 1 minute) */\n    private readonly cleanupIntervalMs = 60_000\n  ) {\n    this.startCleanup();\n  }\n\n  async set(record: ChallengeRecord): Promise<void> {\n    const key = this.getChallengeKey(record.userId, record.flow);\n    this.challenges.set(key, record);\n  }\n\n  async get(userId: string, flow: Flow): Promise<ChallengeRecord | null> {\n    const key = this.getChallengeKey(userId, flow);\n    const record = this.challenges.get(key);\n\n    if (!record) {\n      return null;\n    }\n\n    // Check if expired\n    if (Date.now() > record.expiresAt) {\n      this.challenges.delete(key);\n      return null;\n    }\n\n    return record;\n  }\n\n  async delete(userId: string, flow: Flow): Promise<void> {\n    const key = this.getChallengeKey(userId, flow);\n    this.challenges.delete(key);\n  }\n\n  /**\n   * Get challenge count (for testing/debugging)\n   */\n  size(): number {\n    return this.challenges.size;\n  }\n\n  /**\n   * Clear all challenges (for testing)\n   */\n  clear(): void {\n    this.challenges.clear();\n  }\n\n  /**\n   * Stop cleanup interval and clear memory\n   */\n  destroy(): void {\n    if (this.cleanupInterval) {\n      clearInterval(this.cleanupInterval);\n      this.cleanupInterval = undefined;\n    }\n    this.clear();\n  }\n\n  private getChallengeKey(userId: string, flow: Flow): string {\n    return `${userId}:${flow}`;\n  }\n\n  private startCleanup(): void {\n    this.cleanupInterval = setInterval(() => {\n      this.cleanupExpired();\n    }, this.cleanupIntervalMs);\n\n    // Don't keep the process alive for cleanup\n    this.cleanupInterval.unref?.();\n  }\n\n  private cleanupExpired(): void {\n    const now = Date.now();\n    for (const [key, record] of this.challenges.entries()) {\n      if (now > record.expiresAt) {\n        this.challenges.delete(key);\n      }\n    }\n  }\n}\n","import type { ChallengeRecord, ChallengeStore, Flow } from \"../types/index.js\";\n\n/**\n * Redis client interface (compatible with node-redis, ioredis, etc.)\n */\nexport interface RedisClient {\n  get(key: string): Promise<string | null>;\n  set(\n    key: string,\n    value: string,\n    options?: { EX?: number }\n  ): Promise<string | null>;\n  del(key: string): Promise<number>;\n}\n\n/**\n * Redis-based challenge store for production\n * Recommended for multi-node deploymentss\n */\nexport class RedisStore implements ChallengeStore {\n  constructor(\n    private readonly redis: RedisClient,\n    /** Default TTL in seconds (default: 300 = 5 minutes) */\n    private readonly defaultTTL = 300\n  ) {}\n\n  async set(record: ChallengeRecord): Promise<void> {\n    const key = this.getChallengeKey(record.userId, record.flow);\n    const value = JSON.stringify(record);\n    const ttlSeconds = Math.ceil((record.expiresAt - Date.now()) / 1000);\n\n    // Use the shorter of record expiration or default TTL\n    const finalTTL = Math.min(Math.max(ttlSeconds, 1), this.defaultTTL);\n\n    await this.redis.set(key, value, { EX: finalTTL });\n  }\n\n  async get(userId: string, flow: Flow): Promise<ChallengeRecord | null> {\n    const key = this.getChallengeKey(userId, flow);\n    const value = await this.redis.get(key);\n\n    if (!value) {\n      return null;\n    }\n\n    try {\n      const record: ChallengeRecord = JSON.parse(value);\n\n      // Double-check expiration (Redis TTL might not be exact)\n      if (Date.now() > record.expiresAt) {\n        await this.redis.del(key);\n        return null;\n      }\n\n      return record;\n    } catch {\n      // Invalid JSON, delete the key\n      await this.redis.del(key);\n      return null;\n    }\n  }\n\n  async delete(userId: string, flow: Flow): Promise<void> {\n    const key = this.getChallengeKey(userId, flow);\n    await this.redis.del(key);\n  }\n\n  private getChallengeKey(userId: string, flow: Flow): string {\n    return `passkey:challenge:${userId}:${flow}`;\n  }\n}\n","import type { ChallengeRecord, ChallengeStore, Flow } from \"../types/index.js\";\n\n/**\n * Generic database client interface for challenge storage\n */\nexport interface DatabaseClient {\n  query<T = unknown>(sql: string, params?: unknown[]): Promise<T[]>;\n  execute(sql: string, params?: unknown[]): Promise<void>;\n}\n\n/**\n * Database-based challenge store\n * Works with any SQL database via generic interface\n */\nexport class DbStore implements ChallengeStore {\n  constructor(\n    private readonly db: DatabaseClient,\n    /** Table name for challenges (default: \"passkey_challenges\") */\n    private readonly tableName = \"passkey_challenges\"\n  ) {}\n\n  async set(record: ChallengeRecord): Promise<void> {\n    const sql = `\n\t\t\tINSERT INTO ${this.tableName} (id, user_id, flow, challenge, expires_at)\n\t\t\tVALUES (?, ?, ?, ?, ?)\n\t\t\tON CONFLICT(id) DO UPDATE SET\n\t\t\t\tchallenge = excluded.challenge,\n\t\t\t\texpires_at = excluded.expires_at\n\t\t`;\n\n    const expiresAt = new Date(record.expiresAt).toISOString();\n\n    await this.db.execute(sql, [\n      record.id,\n      record.userId,\n      record.flow,\n      record.challenge,\n      expiresAt,\n    ]);\n  }\n\n  async get(userId: string, flow: Flow): Promise<ChallengeRecord | null> {\n    // First cleanup expired challenges\n    await this.cleanupExpired();\n\n    const id = this.getChallengeId(userId, flow);\n    const sql = `\n\t\t\tSELECT id, user_id, flow, challenge, expires_at\n\t\t\tFROM ${this.tableName}\n\t\t\tWHERE id = ? AND expires_at > ?\n\t\t`;\n\n    const now = new Date().toISOString();\n    const rows = await this.db.query<{\n      id: string;\n      user_id: string;\n      flow: Flow;\n      challenge: string;\n      expires_at: string;\n    }>(sql, [id, now]);\n\n    if (rows.length === 0) {\n      return null;\n    }\n\n    const row = rows[0];\n    return {\n      id: row.id,\n      userId: row.user_id,\n      flow: row.flow as Flow,\n      challenge: row.challenge,\n      expiresAt: new Date(row.expires_at).getTime(),\n    };\n  }\n\n  async delete(userId: string, flow: Flow): Promise<void> {\n    const id = this.getChallengeId(userId, flow);\n    const sql = `DELETE FROM ${this.tableName} WHERE id = ?`;\n    await this.db.execute(sql, [id]);\n  }\n\n  /**\n   * Clean up expired challenges (called automatically in get)\n   */\n  async cleanupExpired(): Promise<void> {\n    const sql = `DELETE FROM ${this.tableName} WHERE expires_at <= ?`;\n    const now = new Date().toISOString();\n    await this.db.execute(sql, [now]);\n  }\n\n  /**\n   * Initialize the challenges table\n   * Call this during setup to create the table\n   */\n  async initializeTable(): Promise<void> {\n    const sql = `\n\t\t\tCREATE TABLE IF NOT EXISTS ${this.tableName} (\n\t\t\t\tid TEXT PRIMARY KEY,\n\t\t\t\tuser_id TEXT NOT NULL,\n\t\t\t\tflow TEXT NOT NULL,\n\t\t\t\tchallenge TEXT NOT NULL,\n\t\t\t\texpires_at TIMESTAMP NOT NULL\n\t\t\t)\n\t\t`;\n    await this.db.execute(sql);\n\n    // Create index for cleanup queries\n    const indexSql = `\n\t\t\tCREATE INDEX IF NOT EXISTS idx_${this.tableName}_expires_at\n\t\t\tON ${this.tableName} (expires_at)\n\t\t`;\n    await this.db.execute(indexSql);\n  }\n\n  private getChallengeId(userId: string, flow: Flow): string {\n    return `${userId}:${flow}`;\n  }\n}\n"],"mappings":"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","names":["import_server","import_browser","import_react","import_react"]}